package OneLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Customer;
  private ConceptPresentation props_Eligibility;
  private ConceptPresentation props_HealthBenefit;
  private ConceptPresentation props_HealthCharge;
  private ConceptPresentation props_IChargeable;
  private ConceptPresentation props_Plan;
  private ConceptPresentation props_PolicyWording;
  private ConceptPresentation props_Product;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Customer:
        if (props_Customer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Customer (the Insured)");
          cpb.presentationByName();
          props_Customer = cpb.create();
        }
        return props_Customer;
      case LanguageConceptSwitch.Eligibility:
        if (props_Eligibility == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A process to determine whether a customer is eligible or not");
          cpb.presentationByName();
          props_Eligibility = cpb.create();
        }
        return props_Eligibility;
      case LanguageConceptSwitch.HealthBenefit:
        if (props_HealthBenefit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Benefit");
          cpb.presentationByName();
          props_HealthBenefit = cpb.create();
        }
        return props_HealthBenefit;
      case LanguageConceptSwitch.HealthCharge:
        if (props_HealthCharge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_HealthCharge = cpb.create();
        }
        return props_HealthCharge;
      case LanguageConceptSwitch.IChargeable:
        if (props_IChargeable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IChargeable = cpb.create();
        }
        return props_IChargeable;
      case LanguageConceptSwitch.Plan:
        if (props_Plan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Plan of a product");
          cpb.presentationByName();
          props_Plan = cpb.create();
        }
        return props_Plan;
      case LanguageConceptSwitch.PolicyWording:
        if (props_PolicyWording == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PolicyWording");
          props_PolicyWording = cpb.create();
        }
        return props_PolicyWording;
      case LanguageConceptSwitch.Product:
        if (props_Product == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Product = cpb.create();
        }
        return props_Product;
    }
    return null;
  }
}
